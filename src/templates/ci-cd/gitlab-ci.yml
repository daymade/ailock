stages:
  - validate
  - test
  - security

variables:
  NODE_VERSION: "18"

# AI-Proof File Guard Protection Job
ailock-protection:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  before_script:
    - apk add --no-cache git jq
    - npm install -g ailock
  script:
    # Validate configuration
    - |
      if [ ! -f .ailock ]; then
        echo "‚ùå No .ailock configuration found"
        echo "üí° Run 'ailock init' to create configuration"
        exit 1
      fi
      echo "‚úÖ .ailock configuration found"
    
    # Check protection status
    - echo "üìã Checking protected files status..."
    - ailock status --json > ailock-status.json
    - LOCKED_COUNT=$(cat ailock-status.json | jq -r '.lockedFiles | length // 0')
    - PROTECTED_COUNT=$(cat ailock-status.json | jq -r '.protectedFiles | length // 0')
    - echo "üîí Locked files:$LOCKED_COUNT"
    - echo "üìÑ Protected files:$PROTECTED_COUNT"
    
    # Generate detailed report
    - |
      cat > ailock-report.md << 'EOF'
      # üîí AI-Proof File Guard CI Report
      
      ## Pipeline Information
      - **Project**: $CI_PROJECT_NAME
      - **Branch**: $CI_COMMIT_REF_NAME
      - **Commit**: $CI_COMMIT_SHORT_SHA
      - **Pipeline**: $CI_PIPELINE_ID
      
      ## Protection Status
      EOF
    - ailock status >> ailock-report.md
    - echo "üìä Protection report generated"
    
    # Check for merge request changes
    - |
      if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]; then
        echo "üîç Checking merge request for protected file changes..."
        git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        CHANGED_FILES=$(git diff --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME...HEAD)
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "üìù Files changed in MR:"
          echo "$CHANGED_FILES"
          
          # Check each changed file
          echo "$CHANGED_FILES" | while read -r file; do
            if [ -f "$file" ] && ailock list --json | jq -e --arg file "$file" '.files[] | select(.path == $file)' > /dev/null; then
              echo "üîí MR modifies protected file: $file"
            fi
          done
        fi
      fi
  artifacts:
    reports:
      junit: ailock-status.json
    paths:
      - ailock-report.md
      - ailock-status.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Security scan for sensitive files
sensitive-files-scan:
  stage: security
  image: alpine:latest
  before_script:
    - apk add --no-cache git findutils
  script:
    - echo "üîç Scanning for potentially sensitive files in repository..."
    - |
      FOUND_SENSITIVE=false
      
      # Define sensitive file patterns
      PATTERNS=".env .env.* *.key *.pem secrets.json credentials.json config.json"
      
      for pattern in $PATTERNS; do
        FILES=$(find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./dist/*" 2>/dev/null || true)
        if [ -n "$FILES" ]; then
          echo "‚ö†Ô∏è  Found files matching pattern '$pattern':"
          echo "$FILES"
          FOUND_SENSITIVE=true
        fi
      done
      
      if [ "$FOUND_SENSITIVE" = "true" ]; then
        echo ""
        echo "üí° Recommendations:"
        echo "   1. Add sensitive file patterns to .ailock configuration"
        echo "   2. Lock sensitive files: ailock lock"
        echo "   3. Install git hooks: ailock install-hooks"
        echo "   4. Review .gitignore to prevent accidental commits"
        
        # Don't fail the pipeline, just warn
        echo "‚ö†Ô∏è  Sensitive files detected but not failing pipeline"
      else
        echo "‚úÖ No obvious sensitive files found in repository"
      fi
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Optional: Integration test with ailock
ailock-integration-test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  before_script:
    - apk add --no-cache git
    - npm install -g ailock
  script:
    - echo "üß™ Running ailock integration tests..."
    
    # Test basic functionality
    - ailock --version
    - ailock status
    
    # Test configuration validation
    - |
      if [ -f .ailock ]; then
        echo "‚úÖ Testing .ailock configuration..."
        ailock list --json > /dev/null
        echo "‚úÖ Configuration is valid"
      else
        echo "‚ö†Ô∏è  No .ailock configuration to test"
      fi
    
    # Test git integration if hooks are installed
    - |
      if [ -f .git/hooks/pre-commit ] && grep -q "ailock" .git/hooks/pre-commit; then
        echo "‚úÖ Git hooks are installed"
      else
        echo "‚ö†Ô∏è  Git hooks not installed - run 'ailock install-hooks'"
      fi
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID